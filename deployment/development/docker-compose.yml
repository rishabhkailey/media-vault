version: '3.8'

volumes:
  postgres-data:
  redis-data:
  minio-data:
  meilisearch-data:


services:
  postgres:
    image: postgres:15.1
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_APPLICATION_USER: ${POSTGRES_APPLICATION_USER}
      POSTGRES_APPLICATION_USER_PASSWORD: ${POSTGRES_APPLICATION_USER_PASSWORD}
      POSTGRES_KEYCLOAK_DB: ${POSTGRES_KEYCLOAK_DB}
      POSTGRES_MEDIA_VAULT_DB: ${POSTGRES_MEDIA_VAULT_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 10s

  keycloak:
    build: 
      dockerfile: dockerfiles/keycloak.Dockerfile
      args:
        - DB_DRIVER=postgres
    command: ["start-dev"]
    environment:
      KC_HOSTNAME_PORT: ${PROXY_PORT}
      KC_HOSTNAME_PATH: /accounts
      KC_PROXY: edge
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HOSTNAME_ADMIN_URL: http://localhost:${PROXY_PORT}/accounts
      KC_HOSTNAME_URL: http://localhost:${PROXY_PORT}/accounts
      KEYCLOAK_ADMIN: ${ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_KEYCLOAK_DB}
      KC_DB_USERNAME: ${POSTGRES_APPLICATION_USER}
      KC_DB_PASSWORD: ${POSTGRES_APPLICATION_USER_PASSWORD}
      KC_HTTP_PORT: 8080
      KC_HEALTH_ENABLED: true

    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 10
  
  media-vault-init:
    build:
      dockerfile: dockerfiles/media-vault-init.Dockerfile
    volumes:
      - ../playbooks:/playbooks
    entrypoint: 
      - 'ansible-playbook'
    command: 
      - '/playbooks/configure-keycloak-clients.yaml'
      - --extra-vars=keycloak_admin=${ADMIN_USER}
      - --extra-vars=keycloak_admin_password=${ADMIN_PASSWORD}
      - --extra-vars=oidc_media_vault_service_client_id=${MEDIA_VAULT_SERVICE_CLIENT_ID}
      - --extra-vars=oidc_media_vault_service_client_secret=${MEDIA_VAULT_SERVICE_CLIENT_SECRET}
      - --extra-vars=oidc_media_vault_spa_client_id=${MEDIA_VAULT_SPA_CLIENT_ID}
      - --extra-vars=keycloak_server=http://keycloak:8080
      - --extra-vars=keycloak_application_realm=${KEYCLOAK_APPLICATION_REALM}
      - --extra-vars=keycloak_intial_user_name=${INITIAL_USER}
      - --extra-vars=keycloak_intial_user_password=${INITIAL_USER_PASSWORD}
      - --extra-vars={"oidc_media_vault_spa_web_origins":["http://${PROXY_HOST}:${PROXY_PORT}"]}
      - --extra-vars={"oidc_media_vault_spa_redirect_uris":["http://${PROXY_HOST}:${PROXY_PORT}/*"]}
    depends_on:
      keycloak:
        condition: service_healthy
      nginx:
        condition: service_healthy

  media-vault:
    build:
      context: ../..
      dockerfile: Dockerfile
    environment:
      MV_DATABASE_POSTGRES_HOST: postgres
      MV_DATABASE_POSTGRES_PORT: 5432
      MV_DATABASE_POSTGRES_USER: ${POSTGRES_APPLICATION_USER}
      MV_DATABASE_POSTGRES_PASSWORD: ${POSTGRES_APPLICATION_USER_PASSWORD}
      # todo move this to env
      MV_DATABASE_POSTGRES_DBNAME: ${POSTGRES_MEDIA_VAULT_DB}
      MV_CACHE_REDIS_HOST: redis
      MV_CACHE_REDIS_PORT: 6379
      MV_CACHE_REDIS_USER: ""
      MV_CACHE_REDIS_PASSWORD: ${REDIS_PASSWORD}
      MV_CACHE_REDIS_DB: 0
      MV_WEBUI_DIRECTORY: "website/dist/"
      MV_MINIO_HOST: minio
      MV_MINIO_PORT: 9000
      MV_MINIO_USER: ${MINIO_ROOT_USER}
      MV_MINIO_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MV_MINIO_BUCKET: ${MINIO_BUCKET}
      MV_MINIO_TLS_ENABLED: false
      MV_OIDC_MEDIAVAULT_CLIENT_ID: ${MEDIA_VAULT_SERVICE_CLIENT_ID}
      MV_OIDC_MEDIAVAULT_CLIENT_SECRET: ${MEDIA_VAULT_SERVICE_CLIENT_SECRET}
      MV_OIDC_SPA_CLIENT_ID: ${MEDIA_VAULT_SPA_CLIENT_ID}
      MV_MEILISEARCH_HOST: http://meilisearch:7700
      MV_MEILISEARCH_APIKEY: ${MEILI_MASTER_KEY}
      MV_SERVER_PORT: 8090
      MV_SERVER_HOST: localhost
      MV_JWT_PRIVATEKEY: ${MV_JWT_PRIVATEKEY}
      MV_JWT_SECRET: ${MV_JWT_SECRET}
      MV_OIDC_URL: http://${PROXY_HOST}:${PROXY_PORT}/accounts/realms/${KEYCLOAK_APPLICATION_REALM}
      MV_OIDC_DISCOVERYENDPOINT: http://${PROXY_HOST}:${PROXY_PORT}/accounts/realms/${KEYCLOAK_APPLICATION_REALM}/.well-known/openid-configuration
    depends_on:
      postgres: 
        condition: service_healthy
      redis: 
        condition: service_healthy
      meilisearch: 
        condition: service_healthy
      minio: 
        condition: service_healthy
      keycloak:
        condition: service_healthy
      media-vault-init:
        condition: service_completed_successfully
      nginx:
        condition: service_healthy
    network_mode: "service:nginx"

  redis:
    image: bitnami/redis:7.0.5
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/bitnami'
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", 'REDISCLI_AUTH="$REDIS_PASSWORD" redis-cli -h localhost ping | grep PONG']
      interval: 30s
      timeout: 10s
      retries: 10

  minio:
    image: minio/minio:RELEASE.2023-01-20T02-05-44Z.hotfix.cca349fb9
    restart: unless-stopped
    command:
      - server
      - /data
      - --console-address
      - ":9090"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${MINIO_BUCKET}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 10

  meilisearch:
    image: getmeili/meilisearch:v1.1
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
    volumes:
      - meilisearch-data:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 10

  nginx:
    image: nginx:alpine3.18
    volumes:
      - ./nginx/templates:/etc/nginx/templates
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PROXY_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      PROXY_HOST: localhost
      PROXY_PORT: 8181
      MAX_FILE_UPLOAD_SIZE: 5G
    depends_on:
      keycloak:
        condition: service_healthy
    ports:
      - 8181:8181
